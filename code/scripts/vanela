#!/bin/bash

# Just a simple Lemonbar script
# Only clickable workspaces, window title, and clock
# Spamming command every second using shell to generate statusline is not really efficient
# So I only put those three items
# If I need other status informations
# I'd rather to call them using Dunst

# Workspace indicator is generated using bspc subscribe
# Which only update if there is any reaction on bspwm
# Window title is generated using xtitle
# Which also has subscribe event ability
# Clock is generated using looped date command
# Only update every thirty seconds

# Based on default example from Bspwm GitHub repository
# Some parts are modified to make them look like what i want
# Cheers! Addy

getcolors () {
  FOREGROUND=$(xrdb -query | grep 'foreground:'| awk '{print $NF}')
  BACKGROUND=$(xrdb -query | grep 'background:'| awk '{print $NF}')
  BLACK=$(xrdb -query | grep 'color0:'| awk '{print $NF}')
  RED=$(xrdb -query | grep 'color1:'| awk '{print $NF}')
  # GREEN=$(xrdb -query | grep 'color2:'| awk '{print $NF}')
  YELLOW=$(xrdb -query | grep 'color3:'| awk '{print $NF}')
  BLUE=$(xrdb -query | grep 'color4:'| awk '{print $NF}')
  # MAGENTA=$(xrdb -query | grep 'color5:'| awk '{print $NF}')
  CYAN=$(xrdb -query | grep 'color6:'| awk '{print $NF}')
  # WHITE=$(xrdb -query | grep 'color7:'| awk '{print $NF}')
}

# Only use the function above if the cache of paintee couldn't be found
if [ -e ~/.cache/paintee ]; then
  . ~/.cache/paintee
else
  getcolors
fi

# Panel configurations
PANEL_HEIGHT=72
PANEL_WIDTH=2356
PANEL_HORIZONTAL_OFFSET=742
PANEL_VERTICAL_OFFSET=12
PANEL_FONT="NotoSans:size=12"
# PANEL_ICON_FONT="FontAwesome-10"
# PANEL_FONT="FiraCode Nerd Font:size=12"
PANEL_ICON_FONT="FiraCode Nerd Font:size=12"
PANEL_FIFO=/tmp/panel-fifo
PANEL_WM_NAME=bspwm_panel
COLOR_DEFAULT_FG="$FOREGROUND"
COLOR_DEFAULT_BG="$BACKGROUND"
COLOR_MONITOR_FG="$FOREGROUND"
COLOR_MONITOR_BG="$BACKGROUND"
COLOR_FOCUSED_MONITOR_FG="$FOREGROUND"
COLOR_FOCUSED_MONITOR_BG="$CYAN"
COLOR_FREE_FG="$BLACK"
COLOR_FREE_BG="$BACKGROUND"
COLOR_FOCUSED_FREE_FG="$FOREGROUND"
COLOR_FOCUSED_FREE_BG="$BLUE"
COLOR_OCCUPIED_FG="$FOREGROUND"
COLOR_OCCUPIED_BG="$BACKGROUND"
COLOR_FOCUSED_OCCUPIED_FG="$FOREGROUND"
COLOR_FOCUSED_OCCUPIED_BG="$BLUE"
COLOR_URGENT_FG="$FOREGROUND"
COLOR_URGENT_BG="$YELLOW"
COLOR_FOCUSED_URGENT_FG="$FOREGROUND"
COLOR_FOCUSED_URGENT_BG="$YELLOW"
COLOR_STATE_FG="$BACKGROUND"
COLOR_STATE_BG="$BACKGROUND"
COLOR_TITLE_FG="$FOREGROUND"
COLOR_TITLE_BG="$BACKGROUND"
# COLOR_SYS_FG="$FOREGROUND"
COLOR_SYS_BG="$RED"

[ -e "$PANEL_FIFO" ] && rm "$PANEL_FIFO"
mkfifo "$PANEL_FIFO"

icon() {
  echo -n -e "%{F#000000}\u$1"
  # echo -n -e "%{F#000000}\u$1%{F-}"
}

get_date() {
  date +"S%a %-d %b %I:%M %p"
}

get_bat() {
  BATC=/sys/class/power_supply/BAT0/capacity
  BATS=/sys/class/power_supply/BAT0/status
  if [ -f $BATC ]; then
    BATC=$(cat $BATC)
    BATS=$(cat $BATS)
    [[ "$BATS" == "Charging" ]] && stat_icon=f0e7 || stat_icon=0020
    if (( "$BATC" <= 100 && "$BATC" > 90 )); then
      capacity_icon=f578
    elif (( "$BATC" <= 90 && "$BATC" > 70 )); then
      capacity_icon=f581
    elif (( "$BATC" <= 70 && "$BATC" > 50 )); then
      capacity_icon=f57f
    elif (( "$BATC" <= 50 && "$BATC" > 30 )); then
      capacity_icon=f57d
    elif (( "$BATC" <= 30 && "$BATC" > 10 )); then
      capacity_icon=f57b
    else
      capacity_icon=f579
    fi
    display="$(icon "$stat_icon")$(icon "$capacity_icon") $BATC%"
  else
    #no battery information found.
    display="$(icon f582)"
  fi
  echo "$display"
}

get_vol() {
    display="$(icon f028) $(amixer get Master | sed -n 's/^.*\[\([0-9]\+%\).*$/\1/p')"
    echo "$display"
}

get_status() {
  while true; do
    echo -e "$(get_date)  $(get_vol)  $(get_bat)"
    sleep 20
  done
}

# Just to make sure there is no double process
killall -9 lemonbar xtitle xdo clock

# Echo every modules to PANEL_FIFO
get_status > "$PANEL_FIFO" &
xtitle -t 70 -sf 'T%s\n' > "$PANEL_FIFO" &
bspc subscribe report > "$PANEL_FIFO" &
num_mon=$(bspc query -M | wc -l)

# Then read those value
panel_bar() {
  while read -r line ; do
    case $line in
      S*)
        # clock output
        # Use pure black 0x000000 instead of COLOR_SYS_FG
        sys="%{F#000000}%{B$COLOR_SYS_BG} ${line#?} %{B-}%{F-}"
        ;;
      T*)
        # xtitle output
        title="%{F$COLOR_TITLE_FG}%{B$COLOR_TITLE_BG} ${line#?} %{B-}%{F-}"
        ;;
      W*)
        # workspaces output
        wm=
        IFS=':'
        set -- ${line#?}
        while [ $# -gt 0 ] ; do
          item=$1
          name=${item#?}
          case $item in
            [mM]*)
              case $item in
                m*)
                  # monitor
                  FG=$COLOR_MONITOR_FG
                  BG=$COLOR_MONITOR_BG
                  on_focused_monitor=
                  ;;
                M*)
                  # focused monitor
                  FG=$COLOR_FOCUSED_MONITOR_FG
                  BG=$COLOR_FOCUSED_MONITOR_BG
                  on_focused_monitor=1
                  ;;
              esac
              [ "$num_mon" -lt 2 ] && shift && continue
              wm="${wm}%{F${FG}}%{B${BG}}%{A:bspc monitor -f ${name}:} ${name} %{A}%{B-}%{F-}"
              ;;
            [fFoOuU]*)
              case $item in
                f*)
                  # free desktop
                  FG=$COLOR_FREE_FG
                  BG=$COLOR_FREE_BG
                  UL=$BG
                  ;;
                F*)
                  if [ "$on_focused_monitor" ] ; then
                    # focused free desktop
                    FG=$COLOR_FOCUSED_FREE_FG
                    BG=$COLOR_FOCUSED_FREE_BG
                    UL=$BG
                  else
                    # active free desktop
                    FG=$COLOR_FREE_FG
                    BG=$COLOR_FREE_BG
                    UL=$COLOR_FOCUSED_FREE_BG
                  fi
                  ;;
                o*)
                  # occupied desktop
                  FG=$COLOR_OCCUPIED_FG
                  BG=$COLOR_OCCUPIED_BG
                  UL=$BG
                  ;;
                O*)
                  if [ "$on_focused_monitor" ] ; then
                    # focused occupied desktop
                    FG=$COLOR_FOCUSED_OCCUPIED_FG
                    BG=$COLOR_FOCUSED_OCCUPIED_BG
                    UL=$BG
                  else
                    # active occupied desktop
                    FG=$COLOR_OCCUPIED_FG
                    BG=$COLOR_OCCUPIED_BG
                    UL=$COLOR_FOCUSED_OCCUPIED_BG
                  fi
                  ;;
                u*)
                  # urgent desktop
                  FG=$COLOR_URGENT_FG
                  BG=$COLOR_URGENT_BG
                  UL=$BG
                  ;;
                U*)
                  if [ "$on_focused_monitor" ] ; then
                    # focused urgent desktop
                    FG=$COLOR_FOCUSED_URGENT_FG
                    BG=$COLOR_FOCUSED_URGENT_BG
                    UL=$BG
                  else
                    # active urgent desktop
                    FG=$COLOR_URGENT_FG
                    BG=$COLOR_URGENT_BG
                    UL=$COLOR_FOCUSED_URGENT_BG
                  fi
                  ;;
              esac
              wm="${wm}%{F${FG}}%{B${BG}}%{U${UL}}%{+u}%{A:bspc desktop -f ${name}:} ${name} %{A}%{B-}%{F-}%{-u}"
              ;;
            [LTG]*)
              # layout, state and flags
              wm="${wm}%{F$COLOR_STATE_FG}%{B$COLOR_STATE_BG} ${name} %{B-}%{F-}"
              ;;
          esac
          shift
        done
        ;;
    esac
    printf "%s\n" "%{l}${wm}%{c}${title}%{r}${sys}"
  done
}

# Get all the results of the modules above then pipe them to Lemonbar
panel_bar < "$PANEL_FIFO" | lemonbar -a 12 \
  -g "$PANEL_WIDTH"x"$PANEL_HEIGHT"+"$PANEL_HORIZONTAL_OFFSET"+"$PANEL_VERTICAL_OFFSET" \
  -f "$PANEL_FONT"  -f "$PANEL_ICON_FONT" -F "$COLOR_DEFAULT_FG" -B "$COLOR_DEFAULT_BG" -n "$PANEL_WM_NAME" | bash &

sleep 0.5
# Trigger the PANEL_FIFO to make it instantly refreshed after bspwmrc reloaded
echo "dummy" > "$PANEL_FIFO"

sleep 0.5
# Rule the panel to make it hiding below fullscreen window
# I add 'sleep 0.5' to avoid xdo executed before the Lemonbar fully loaded
wid=$(xdo id -a "$PANEL_WM_NAME")
xdo above -t "$(xdo id -N Bspwm -n root | sort | head -n 1)" "$wid"

# Don't close this process
wait
