" Comment the following line if you don't want Vim and NeoVim to share the
" same plugin download directory.
let g:spacevim_plug_home = '~/.vim/plugged'

" Uncomment the following line to override the leader key. The default value is space key "<\Space>".
" let g:spacevim_leader = "<\Space>"

" Uncomment the following line to override the local leader key. The default value is comma ','.
" let g:spacevim_localleader = ','

" Enable the existing layers in space-vim.
" Refer to https://github.com/liuchengxu/space-vim/blob/master/layers/LAYERS.md for all available layers.
let g:spacevim_layers = [
      \ 'go', 'c-c++', 'python', 'java',
      \ 'javascript', 'typescript', 'vue',
      \ 'html', 'markdown', 'latex',
      \ 'fzf', 'auto-completion',
      \ 'editing', 'formatting', 'programming', 'syntax-checking',
      \ 'code-snippets', 'better-defaults', 'which-key']

" Uncomment the following line if your terminal(-emulator) supports true colors.
" let g:spacevim_enable_true_color = 1

" Uncomment the following if you have some nerd font installed.
" let g:spacevim_nerd_fonts = 1

" If you want to have more control over the layer, try using Layer command.
" if g:spacevim.gui
"   Layer 'airline'
" endif

" Manage your own plugins.
" Refer to https://github.com/junegunn/vim-plug for more detials.
function! UserInit()

  " Add your own plugin via Plug command.
  Plug 'junegunn/seoul256.vim'

endfunction

" Override the default settings from space-vim as well as adding extras
function! UserConfig()

  " Override the default settings.
  " Uncomment the following line to disable relative number.
  " set norelativenumber

  " Adding extras.
  " Uncomment the following line If you have installed the powerline fonts.
  " It is good for airline layer.
  " let g:airline_powerline_fonts = 1

  " Enable lsp for go by using gopls
  let g:completor_filetype_map = {}
  let g:completor_filetype_map.go = {'ft': 'lsp', 'cmd': 'gopls -remote=auto'}"

  " Use vim 8.2+ popup windows for documentation
  let g:go_doc_popup_window = 1

  " Completor.vim actions
  " Go to definition
  autocmd FileType python noremap <silent> <LocalLeader>d :call completor#do('definition')<CR>
  autocmd FileType python noremap <silent> <LocalLeader>b :call completor#do('doc')<CR>

  " vim-go actions
  " Go coveraage
  autocmd FileType go nmap <silent> <LocalLeader>c <Plug>(go-coverage-toggle)

  " Go alternate bangs
  autocmd Filetype go command! -bang A call go#alternate#Switch(<bang>0, 'edit')
  autocmd Filetype go command! -bang AV call go#alternate#Switch(<bang>0, 'vsplit')
  autocmd Filetype go command! -bang AS call go#alternate#Switch(<bang>0, 'split')
  autocmd Filetype go command! -bang AT call go#alternate#Switch(<bang>0, 'tabe')

  " Go alternate edit
  au Filetype go nmap <silent> <LocalLeader>a <Plug>(go-alternate-edit)

  " Go declarations
  au Filetype go nnoremap <silent> <LocalLeader>dd :GoDeclsDir<CR>
  au Filetype go nnoremap <silent> <LocalLeader>df :GoDecls<CR>

  " Go signatures & types info
  au FileType go nmap <silent> <LocalLeader>ss <Plug>(go-info)

  " Go highlight corresponding identifiers
  au FileType go nnoremap <silent> <LocalLeader>st :GoSameIdsToggle<CR>

  " Go rename
  au FileType go nmap <silent> <LocalLeader>ge <Plug>(go-rename)

  " Go Guru specifics
  " Guru referrers
  au FileType go nnoremap <silent> <LocalLeader>gr :GoReferrers<CR>

  " Guru describe
  au FileType go nnoremap <silent> <LocalLeader>gd :GoDescribe<CR>

  " Guru implements
  au FileType go nnoremap <silent> <LocalLeader>gi :GoImplements<CR>

  " Guru which errors
  au FileType go nnoremap <silent> <LocalLeader>gx :GoWhicherrs<CR>

  " Guru channel peers 
  au FileType go nnoremap <silent> <LocalLeader>gp :GoChannelPeers<CR>

  " Guru callers 
  au FileType go nnoremap <silent> <LocalLeader>gcr :GoCallers<CR>

  " Guru callees 
  au FileType go nnoremap <silent> <LocalLeader>gce ::GoCallees<CR>
endfunction
